{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":90741,"databundleVersionId":10576436,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-17T03:02:51.999844Z","iopub.execute_input":"2025-01-17T03:02:52.000191Z","iopub.status.idle":"2025-01-17T03:02:53.382456Z","shell.execute_reply.started":"2025-01-17T03:02:52.000148Z","shell.execute_reply":"2025-01-17T03:02:53.381264Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/train.csv\n/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/test.csv\n/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/gender_submission.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"**Tiền xử lí dữ liệu bị thiếu****","metadata":{}},{"cell_type":"code","source":"Dữ liệu huấn luyện (train.csv) có:\n891 hàng và 12 cột.\nCột Survived là biến mục tiêu (0: không sống sót, 1: sống sót).\nMột số cột có giá trị bị thiếu:\nAge: 714/891 không bị thiếu.\nCabin: chỉ có 204/891 không bị thiếu.\nEmbarked: 889/891 không bị thiếu.\nCác bước tiếp theo:\nTiền xử lý dữ liệu:\n\nXử lý các giá trị bị thiếu (Age, Cabin, Embarked).\nMã hóa các cột phân loại (Sex, Embarked).\nChọn các cột quan trọng làm đặc trưng.\nXây dựng mô hình:\n\nDùng 5 phương pháp được chọn: Logistic Regression, KNN, Decision Tree, Random Forest, Gradient Boosting.\nChạy thực nghiệm và phân tích kết quả:\n\nSo sánh độ chính xác trên tập kiểm tra.","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Đọc dữ liệu\ntrain_data = pd.read_csv(\"/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/test.csv\")\n\n# Kiểm tra dữ liệu\ntrain_data.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T03:37:38.950707Z","iopub.execute_input":"2025-01-17T03:37:38.951195Z","iopub.status.idle":"2025-01-17T03:37:38.984325Z","shell.execute_reply.started":"2025-01-17T03:37:38.951159Z","shell.execute_reply":"2025-01-17T03:37:38.983049Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\n\n# Load the train and test data\ntrain_data = pd.read_csv('/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/train.csv')\ntest_data = pd.read_csv('/kaggle/input/2024-hk-1-se-355-p-11-titanic-classification/test.csv')\n\n# Copy data for processing\ntrain_processed = train_data.copy()\ntest_processed = test_data.copy()\n\n# Step 1: Fill missing values\n# Age: Fill missing values with the median\nage_imputer = SimpleImputer(strategy='median')\ntrain_processed['Age'] = age_imputer.fit_transform(train_processed[['Age']])\ntest_processed['Age'] = age_imputer.transform(test_processed[['Age']])\n\n# Embarked: Fill missing values with the most frequent value\nembarked_imputer = SimpleImputer(strategy='most_frequent')\ntrain_processed['Embarked'] = embarked_imputer.fit_transform(train_processed[['Embarked']]).ravel()\ntest_processed['Embarked'] = embarked_imputer.transform(test_processed[['Embarked']]).ravel()\n\n# Fare: Fill missing values with the median (only in test set)\nfare_imputer = SimpleImputer(strategy='median')\ntest_processed['Fare'] = fare_imputer.fit_transform(test_processed[['Fare']])\n\n# Step 2: Encode categorical features (Sex and Embarked)\nencoder = OneHotEncoder(drop='first', sparse_output=False)  # Drop first to avoid multicollinearity\nsex_encoded_train = encoder.fit_transform(train_processed[['Sex']])\nsex_encoded_test = encoder.transform(test_processed[['Sex']])\n\nembarked_encoded_train = encoder.fit_transform(train_processed[['Embarked']])\nembarked_encoded_test = encoder.transform(test_processed[['Embarked']])\n\n# Create DataFrames for encoded features\nsex_encoded_train = pd.DataFrame(sex_encoded_train, columns=['Male'])\nsex_encoded_test = pd.DataFrame(sex_encoded_test, columns=['Male'])\n\nembarked_encoded_train = pd.DataFrame(embarked_encoded_train, columns=['Embarked_Q', 'Embarked_S'])\nembarked_encoded_test = pd.DataFrame(embarked_encoded_test, columns=['Embarked_Q', 'Embarked_S'])\n\n# Step 3: Combine features for training and testing\ntrain_final = pd.concat(\n    [train_processed[['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']], \n     sex_encoded_train, embarked_encoded_train],\n    axis=1\n)\ntest_final = pd.concat(\n    [test_processed[['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']], \n     sex_encoded_test, embarked_encoded_test],\n    axis=1\n)\n\n# Step 4: Standardize the numerical features\nscaler = StandardScaler()\nnumerical_features_train = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\nnumerical_features_test = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n\ntrain_final[numerical_features_train] = scaler.fit_transform(train_final[numerical_features_train])\ntest_final[numerical_features_test] = scaler.transform(test_final[numerical_features_test])\n\nprint(train_final.head())\nprint(test_final.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-17T04:03:11.856562Z","iopub.execute_input":"2025-01-17T04:03:11.857076Z","iopub.status.idle":"2025-01-17T04:03:11.970570Z","shell.execute_reply.started":"2025-01-17T04:03:11.857034Z","shell.execute_reply":"2025-01-17T04:03:11.968707Z"}},"outputs":[{"name":"stdout","text":"   PassengerId  Survived    Pclass       Age     SibSp     Parch      Fare  \\\n0            1         0  0.827377 -0.565736  0.432793 -0.473674 -0.502445   \n1            2         1 -1.566107  0.663861  0.432793 -0.473674  0.786845   \n2            3         1  0.827377 -0.258337 -0.474545 -0.473674 -0.488854   \n3            4         1 -1.566107  0.433312  0.432793 -0.473674  0.420730   \n4            5         0  0.827377  0.433312 -0.474545 -0.473674 -0.486337   \n\n   Male  Embarked_Q  Embarked_S  \n0   1.0         0.0         1.0  \n1   0.0         0.0         0.0  \n2   0.0         0.0         1.0  \n3   0.0         0.0         1.0  \n4   1.0         0.0         1.0  \n   PassengerId    Pclass       Age     SibSp     Parch      Fare  Male  \\\n0          892  0.827377  0.394887 -0.474545 -0.473674 -0.490783   1.0   \n1          893  0.827377  1.355510  0.432793 -0.473674 -0.507479   0.0   \n2          894 -0.369365  2.508257 -0.474545 -0.473674 -0.453367   1.0   \n3          895  0.827377 -0.181487 -0.474545 -0.473674 -0.474005   1.0   \n4          896  0.827377 -0.565736  0.432793  0.767630 -0.401017   0.0   \n\n   Embarked_Q  Embarked_S  \n0         1.0         0.0  \n1         0.0         1.0  \n2         1.0         0.0  \n3         0.0         1.0  \n4         0.0         1.0  \n","output_type":"stream"}],"execution_count":16}]}